
IO-LUA is a 2D game engine for Lua.

Current platform support: Linux, Mac OS X, Windows
Dependencies: SDL2, SDL2_image, SDL2_ttf, Lua 5

How to use it:
==============

There is a sample application provided with this game engine.
If you just want to test it out, then compile this project then 
run ./build/io-lua or ./build/io-lua.exe

If you want to script your own lua game, edit the files 
inside the ./game folder. You can add any files you want in the 
game folder, just make sure that config.lua and game.lua exist.

When the game engine executable is ran, it looks in the game 
folder from the current directory and runs config.lua and then 
game.lua. 

After compiling, these output files will be in the build folder:

constants.lua	- This will always be the first script executed
		by the game engine

io-lua(.exe)	- The game engine executable

game/		- The folder containing the Lua game scripts
		and assets

How to compile:
===============
Note: Every time you compile, everything in the build folder gets overwritten.

For Linux or Mac OS X:

If you have not done this already, download the source code to SDL2, SDL2 image, 
SDL2 ttf, and Lua. Run ./configure && sudo make install on each of them.

Then go to this project and run ./configure && make


For Windows do the following:

The .lib and .dll files are already provided so just run build.bat 
from a Visual Studio Command Prompt.

If you ever edit the game engine, run build.bat again



About config.lua:
=================
This script will be executed by the game engine before running your game.
It's usually used to set game engine variables before the video and audio is initialized.
All game engine variables will assume their individual default values if left uninitialized.

List of game engine variables:

gamepath	- Directory of game that contains the lua scripts and assets
datapath	- Directory of where game can write data
fps		- Maximum frames per second
v_width		- Window width in pixels (X coordinates)
v_height	- Window height in pixles (Y coordinate)
v_driver	- Index of video driver to use
v_renderer	- Index of render driver to use
v_fullscreen	- 1 or 0 for fullscreen
v_grab		- 1 or 0 for grabbing mouse input to not leave the window
s_volume	- Volume of sound. 0.0 is mute, 1.0 is full volume, there is no enforced volume limit.
s_driver	- Index of sound driver to use
s_device	- Index of sound device to use for output
s_freq		- Speed of sound playback
s_format	- Bit size of sound samples (8, 16, or 32)
s_channels	- 1 for mono, 2 for stereo
s_samples	- Audio buffer size in samples

About game.lua:
===============
This is the lua script that the game engine will call after config.lua.
The game engine will pass control to Lua by invoking the function main.

The signature for the main function is:

function main(event, arg1, arg2, arg3, arg4)
	...
end

event will be one of the following values:

EVENT_INIT:
	This event will be passed only once when the game is initializing.
	The Lua game should load and initialize any assets it needs.

EVENT_UPDATE:
	This event will be passed each frame. The Lua game should update things 
	such as animations.

EVENT_KEYBOARD:
	The user has pressed a key from the keyboard.
	arg1 is the key they pressed (see constants.lua for a list of key constants)
	arg2 is PRESSED for pressed or RELEASED for released.

EVENT_MOUSEBUTTON:
	The user has clicked with their mouse.
	arg1 is the x coordinate of the mouse.
	arg2 is the y coordinate of the mouse.
	arg3 is the BUTTON_LEFT, BUTTON_MIDDLE, or BUTTON_RIGHT.
	arg4 is PRESSED for pressed or RELEASED for released.

EVENT_SHUTDOWN:
	The game is shutting down. The Lua game should free any handles it has opened.

 
The game engine exports the following functions to Lua:
=======================================================
Get(var)
	Gets the value of a game engine variable
	Returns the value or nil on error

Set(var, value)
	Sets the value of a game engine variable

GetPlatform()
	Gets the name of the current operating system.
	Returns one of the following strings:
	"Linux", "Mac OS X", "Windows", "iOS", "Android"

GetWindowSize()
	Returns two integers of the width (x) and the height (y) of the window.

LoadFont(filename)
	Loads a font from a file relative to gamepath.
	Returns a handle to that font

LoadImage(filename)
	Loads a jpg or png image from a file relative gamepath.
	Returns a handle to that image

DrawText(x, y, text, font, color)
	Draws text to the screen
	x and y are the coordinates to draw to.
	text is the text to display.
	font is a handle to a font loaded with LoadFont.
	color is an rgba value.

DrawBackground(image)
	Draws an image to stretch as the background of the window.
	image is a handle to an image loaded with LoadImage.

DrawImage(x, y, image, w, h)
	Draws an image at the specified location in the window.
	w and h are optional arguments to set the width and height 
	to scale the image to. image is a handle to an image loaded with LoadImage

Quit()
	Sends the EVENT_SHUTDOWN event to the game and then exits the game

FreeFont(font)
	Frees the handle to a font

FreeImage(image)
	Frees the handle to an image

SetColor(color)	
	Sets the drawing color for Clear, DrawLine, DrawRect, and FillRect functions

Clear()
	Draws a single color to the whole window

DrawLine(x1, y1, x2, y2)
	Draws a line to the window.

DrawRect(x, y, h, w)
	Draws a rectangle to the window.

FillRect(x, y, h, w)
	Fills a rectangle with a color (use SetColor to set the color)

OpenFile(filename, mode)
	Opens a file relative to datapath.
	mode is an fopen-style mode.
	Returns a handle to the file or nil on error.

ReadFile(file)
	Reads the next line from the file handle and returns it as a string
	without the new line.

WriteFile(file, string)
	Writes a string to the file handle

SeekFile(file, offset, whence)
	Seeks the file position in the file handle.
	offset is the number of characters to seek.
	whence is SEEK_SET, SEEK_CUR, or SEEK_END.
	Returns the resulting file offset

CloseFile(file)
	Closes a file handle

RenameFile(oldfile, newfile)
	Renames a file relative to datapath.
	Returns nil on error

RemoveFile(filename)
	Deletes a file relative to datapath.
	Returns nil on error

MakeDirectory(dirname)
	Creates a directory relative to datapath.
	Returns nil on error

RemoveDirectory(dirname)
	Deletes an empty directory relative to datapath.
	Returns nil on error

GetWindowSize()
	Returns the width and height of the window

LoadSound(file)
	Loads a wav file relative to gamepath.
	Returns a handle to the loaded sound.

PlaySound(sound)
	Begins playing a sound from a sound handle.
	Returns a handle to the new channel.

LoopSound(sound)
	Begins playing a sound from a sound handle.
	The sound will play in a loop.
	Returns a handle to the new channel.

FreeSound(sound)
	Frees the handle to a sound

PauseSound(channel)
	Pauses a playing channel

ResumeSound(channel)
	Resumes a paused channel

StopSound(channel)
	Stops playing a sound channel

GetTicks()
	Returns the number of clock ticks since the game started running.

LoadGameFile(file)
	Loads the contents of a file into a string.
	The filename is relative to gamepath.

LoadDataFile(file)
	Loads the contents of a file into a string.
	The filename is relative to datapath.

MessageBox(text)
	Displays a message box in the game window.

PauseAudio()
	Pauses audio.

ResumeAudio()
	Resumes audio. Sound channels paused with PauseSound will still be paused.

StopAudio()
	Stops all sound channels from playing.

GetVolume()
	Returns the value of the current volume as an integer.

SetVolume(vol)
	Sets the volume from an integer.
	If set to 0, the audio will be silent.
	100 is the normal volume but can be set higher for louder audio.

MuteAudio()
	Mutes the audio.

UnmuteAudio()
	Unmutes the audio.

SaveDataFile(file, data, len)
	Writes the string data out to a file relative to datapath.
	len is optional, specifying the number of characters to write.

TellFile(handle)
	Returns the current offset of the file opened with OpenFile

CheckDataFile(file)
	Checks if the file exists relative to datapath
